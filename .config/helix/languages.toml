########################################
# LANGUAGE: PYTHON
#########################################
[[language]]
name = "python"
language-id = "python"
auto-format = true
language-servers = ["basedpyright", "ruff", "scls"]
formatter = { command = "zsh", args = ["-c", """
  ruff check --select I --fix - | ruff format -
  """] }
file-types = ["py", "ipynb"]
comment-token = "#"
shebangs = ["python"]
roots = ["pyproject.toml", "setup.py", "poetry.lock", ".git", ".jj", ".venv/"]

########################################
# https://docs.basedpyright.com/latest/configuration/language-server-settings/
########################################
[language-server.basedpyright]
command = "basedpyright-langserver"
args = ["--stdio"]
config.reportMissingtypeStubs = true
except-features = ["format"]
reportUnusedImport = false

[language-server.basedpyright.config.basedpyright.analysis]
autoSearchPaths = true
diagnosticMode = "workspace"  # "openFilesOnly"
useLibraryCodeForTypes = true
autoImportCompletions = true
typeCheckingMode = "standard"
# typeCheckingMode = "recommended"
disableTaggedHints = false


# ########################################
# # https://docs.astral.sh/ruff/settings
# ########################################

[language-server.ruff]
command = "ruff"
args = ["server", "--preview"]
preview = true
show-fixes = true
include = ["*.py"]
fix = true

[language-server.ruff.config.settings]
lineLength = 80
logLevel = "debug"

[language-server.ruff.analyze]
detect-string-imports = true

[language-server.ruff.lint.pydocstyle]
convention = "google"

[language-server.ruff.config.settings.lint]
select = [
  "E",
  "F",
  "W",
  "B",
  "I",
  "RUF",
  "N",
  "SIM",
  "LOG",
  "ERA",
  "W",
  "D",
  "UP",
  "ANN",
  "ASYNC",
  "S",
  "RET",
  "TCH",
  "ARG",
  "PTH",
  "DOC",
]
preview = false

[language-server.ruff.config.settings.format]
preview = true
quote-style = "double"
docstring-code-format = true
indent-style = "space"
skip-magic-trailing-comma = true


#########################################
# LANGUAGE: Markdown
#########################################

[[language]]
auto-format = true
# language-servers = ["marksman", "mpls", "scls", "markdown-oxi"]
language-servers = ["scls", "markdown-oxide", "marksman"]
name = "markdown"
formatter = { command = "prettier", args = ["--parser", "markdown"] }


[language-server.mpls]
command = "mpls"
args = ["--dark-mode","--enable-emoji", "--enable-wikilinks", "--full-sync", "--browser", "Firefox", "--port", "8080"]

#########################################
# LANGUAGE: LaTeX
######################################### 
[[language]]
name = "latex"
language-servers = ["texlab", "ltex", "scls"] # ltex provides some autocompletion/grammar suggestions
indent = { tab-width = 4, unit = "\t" }

[language-server.texlab]
command = "texlab"

[language-server.texlab.config]
auxDirectory = "output"

[language-server.texlab.config.chktex]
onOpenAndSave = true
onEdit = true

[language-server.texlab.config.build]
forwardSearchAfter = false
onSave = false
executable = "lualatex"
args = [
	"-X",
	"compile",
	"%f",
	"--synctex",
	"--keep-logs",
	"--keep-intermediates",
	"--outdir=output",
	"-Zshell-escape",
]
#########################################
# LANGUAGE: Snippets
######################################### 
# introduce new language server
[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 100           # set max completion results len for each group: words, snippets, unicode-input
feature_words = true                 # enable completion by word
feature_snippets = true              # enable snippets
snippets_first = true                # completions will return before snippets by default
snippets_inline_by_word_tail = false # suggest snippets by WORD tail, for example text `xsq|` become `x^2|` when snippet `sq` has body `^2`
feature_unicode_input = false        # enable "unicode input"
feature_paths = false                # enable path completion
feature_citations = false            # enable citation completion (only on `citation` feature enabled)

#########################################
# LANGUAGE: Rust
#########################################
[[language]]
name = "rust"
auto-format = true

roots = [
  "Cargo.toml",
  "Cargo.lock"
]

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'`' = '`'

[language-server.rust-analyzer]
command = "rust-analyzer"

[language-server.rust-analyzer.config]
inlayHints.bindingModeHints.enable = false
inlayHints.closingBraceHints.minLines = 10
inlayHints.closureReturnTypeHints.enable = "with_block"
inlayHints.discriminantHints.enable = "fieldless"
inlayHints.lifetimeElisionHints.enable = "skip_trivial"
inlayHints.typeHints.hideClosureInitialization = false
